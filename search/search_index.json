{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#loading-lua-scripts","title":"Loading Lua scripts","text":"<ol> <li>Drop script into <code>Counter-Strike Global Offensive\\nix\\scripts</code> folder.</li> <li>Click \"Refresh\" in the \"Scripts\" tab in cheat menu.</li> <li>Select the script from list and press \"Load\".</li> </ol>"},{"location":"cvars/","title":"cvars","text":""},{"location":"cvars/#getting-convars","title":"Getting convars","text":"<p>You can do this by <code>cvars.CONVAR_NAME</code> <pre><code>local MAX_RATE = 786432\nif cvars.rate:get_int() ~= MAX_RATE then\nprint(\"Bad config!\", color_t.new(1, 0, 0, 1))\ncvars.rate:set_int(MAX_RATE) \nend\n</code></pre> Return type is <code>convar_t</code></p>"},{"location":"engine/","title":"engine","text":""},{"location":"engine/#execute_client_cmd","title":"execute_client_cmd","text":"<p><code>engine.execute_client_cmd(command: string)</code> </p> Name Type Description command <code>string</code> Command to execute"},{"location":"engine/#set_clan_tag","title":"set_clan_tag","text":"<p><code>engine.set_clan_tag(clan_tag: string, clan_name?: string)</code> </p> Name Type Description clan_tag <code>string</code> Clan tag clan_name <code>string</code> Optional. Clan name (team name in scoreboard)"},{"location":"engine/#trace_line","title":"trace_line","text":"Skip single entitySkip multiple entitiesFilter entities <p><code>engine.trace_line(from: vec3_t, to: vec3_t, skip?: entity_t, mask?: number, type?: number):</code> <code>trace_t</code> </p> Name Type Description from <code>vec3_t</code> Position to start tracing from to <code>vec3_t</code> Position where the trace ends skip <code>entity_t</code> Optional. Entity to skip mask <code>number</code> Optional. Trace mask type <code>number</code> Optional. Trace type [0-3]<code>0</code>: Everything <code>Default</code><code>1</code>: World only<code>2</code>: Entities only<code>3</code>: Everything filter props <p><code>engine.trace_line(from: vec3_t, to: vec3_t, skip?: entity_t[], mask?: number, type?: number):</code> <code>trace_t</code> </p> Name Type Description from <code>vec3_t</code> Position to start tracing from to <code>vec3_t</code> Position where the trace ends skip <code>entity_t[]</code> Optional. Table of entities to skip mask <code>number</code> Optional. Trace mask type <code>number</code> Optional. Trace type [0-3]<code>0</code>: Everything <code>Default</code><code>1</code>: World only<code>2</code>: Entities only<code>3</code>: Everything filter props <p><code>engine.trace_line(from: vec3_t, to: vec3_t, should_hit_entity?: function, mask?: number, type?: number):</code> <code>trace_t</code> </p> Name Type Description from <code>vec3_t</code> Position to start tracing from to <code>vec3_t</code> Position where the trace ends should_hit_entity <code>function</code> Optional. Function, that receives <code>entity_t</code> and <code>contents_mask</code> in its arguments, and skips an entity if function returns <code>false</code> mask <code>number</code> Optional. Trace mask type <code>number</code> Optional. Trace type [0-3]<code>0</code>: Everything <code>Default</code><code>1</code>: World only<code>2</code>: Entities only<code>3</code>: Everything filter props"},{"location":"engine/#trace_hull","title":"trace_hull","text":"Skip single entitySkip multiple entitiesFilter entities <p><code>engine.trace_hull(from: vec3_t, to: vec3_t, mins: vec3_t, maxs: vec3_t, skip?: entity_t, mask?: number, type?: number):</code> <code>trace_t</code> </p> Name Type Description from <code>vec3_t</code> Position to start tracing from to <code>vec3_t</code> Position where the trace ends mins <code>vec3_t</code> Mins of the hull maxs <code>vec3_t</code> Maxs of the hull skip <code>entity_t</code> Optional. Entity to skip mask <code>number</code> Optional. Trace mask type <code>number</code> Optional. Trace type [0-3]<code>0</code>: Everything <code>Default</code><code>1</code>: World only<code>2</code>: Entities only<code>3</code>: Everything filter props <p><code>engine.trace_hull(from: vec3_t, to: vec3_t, mins: vec3_t, maxs: vec3_t, skip?: entity_t[], mask?: number, type?: number):</code> <code>trace_t</code> </p> Name Type Description from <code>vec3_t</code> Position to start tracing from to <code>vec3_t</code> Position where the trace ends mins <code>vec3_t</code> Mins of the hull maxs <code>vec3_t</code> Maxs of the hull skip <code>entity_t[]</code> Optional. Table of entities to skip mask <code>number</code> Optional. Trace mask type <code>number</code> Optional. Trace type [0-3]<code>0</code>: Everything <code>Default</code><code>1</code>: World only<code>2</code>: Entities only<code>3</code>: Everything filter props <p><code>engine.trace_hull(from: vec3_t, to: vec3_t, mins: vec3_t, maxs: vec3_t, should_hit_entity?: function, mask?: number, type?: number):</code> <code>trace_t</code> </p> Name Type Description from <code>vec3_t</code> Position to start tracing from to <code>vec3_t</code> Position where the trace ends mins <code>vec3_t</code> Mins of the hull maxs <code>vec3_t</code> Maxs of the hull should_hit_entity <code>function</code> Optional. Function, that receives <code>entity_t</code> and <code>contents_mask</code> in its arguments, and skips an entity if function returns <code>false</code> mask <code>number</code> Optional. Trace mask type <code>number</code> Optional. Trace type [0-3]<code>0</code>: Everything <code>Default</code><code>1</code>: World only<code>2</code>: Entities only<code>3</code>: Everything filter props"},{"location":"engine/#get_netvar_offset","title":"get_netvar_offset","text":"<p><code>engine.get_netvar_offset(table_name: string, prop_name: string):</code> <code>number</code> </p> Name Type Description table_name <code>string</code> Name of the table prop_name <code>string</code> Name of the property"},{"location":"engine/#get_view_angles","title":"get_view_angles","text":"<p><code>engine.get_view_angles():</code> <code>angle_t</code> </p>"},{"location":"engine/#set_view_angles","title":"set_view_angles","text":"<p><code>engine.set_view_angles(angles: angle_t)</code> </p> Name Type Description angles <code>angle_t</code> New view angles"},{"location":"entitylist/","title":"entitylist","text":""},{"location":"entitylist/#get","title":"get","text":"<p><code>entitylist.get(idx_or_user_id: number, is_user_id?: boolean):</code> <code>entity_t</code> </p> Name Type Description idx_or_user_id <code>number</code> Index or User ID of the player is_user_id <code>boolean</code> Optional. Defaults to <code>false</code>. Is <code>value</code> a user ID"},{"location":"entitylist/#get_local_player","title":"get_local_player","text":"<p><code>entitylist.get_local_player():</code> <code>entity_t</code> </p>"},{"location":"entitylist/#get_entities","title":"get_entities","text":"Return styleCallback style <p><code>entitylist.get_entities(class_name_or_id: string|number|nil, include_dormant: boolean):</code> <code>entity_t[]</code> </p> Name Type Description class_name_or_id <code>string|number|nil</code> Name or ID of the class. <code>nil</code> to get all entities include_dormant <code>boolean</code> Whether to include dormant entities or not <p><code>entitylist.get_entities(class_name_or_id: string|number|nil, include_dormant: boolean, callback: function)</code> </p> Name Type Description class_name_or_id <code>string|number|nil</code> Name or ID of the class. <code>nil</code> to get all entities include_dormant <code>boolean</code> Whether to include dormant entities or not callback <code>function</code> Callback function, that receives <code>entity_t</code> as an argument <pre><code>entitylist.get_entities(\"CCSPlayer\", false, function(entity)\nrender.circle_fade_3d(entity:get_origin(), 50, color_t.new(1, 0, 0, 0.5), color_t.new(1, 0, 0, 0))\nend)\n</code></pre>"},{"location":"environment/","title":"environment","text":"<p>Info</p> <p>This page describes only overridden and custom functions. Other functions of the standard Lua environment haven't been changed in any aspect</p>"},{"location":"environment/#register_callback","title":"register_callback","text":"<p><code>register_callback(name: string, func: function)</code> </p> Name Type Description name <code>string</code> Event name. Look here for event list func <code>function</code> Callback function"},{"location":"environment/#find_pattern","title":"find_pattern","text":"<p><code>find_pattern(module: string, pattern: string, offset?: number):</code> <code>userdata</code> </p> Name Type Description module <code>string</code> Module name to search the pattern in pattern <code>string</code> IDA style pattern to search for. Wildcard - <code>?</code> offset <code>number</code> Optional. Offset in bytes which will be added to the pointer <p>Warning</p> <p>If pattern is not found, return value will be <code>nil</code></p>"},{"location":"environment/#get_user_name","title":"get_user_name","text":"<p><code>get_user_name():</code> <code>string</code> </p> <p>Returns the name of the cheat user</p>"},{"location":"environment/#print","title":"print","text":"<p><code>print(text: string, color?: color_t)</code> </p> Name Type Description text <code>string</code> Text to print color <code>color_t</code> Optional. Text color <p>Info</p> <p>You can put <code>\\0</code> in the end of the text to prevent newline</p>"},{"location":"esp/","title":"esp","text":""},{"location":"esp/#esp-types","title":"ESP types","text":"Name <code>enemy</code> <code>local_player</code> <code>team</code>"},{"location":"esp/#functions","title":"Functions","text":""},{"location":"esp/#add_bar","title":"add_bar","text":"<p><code>esp.local_player.add_bar(bar_name: string, callback: function)</code> </p> Name Type Description bar_name <code>string</code> Name of the bar callback <code>function</code> Function that receives <code>entity_t</code> in the argument, and should return a <code>number</code> in range of <code>[0-100]</code>. If returns <code>nil</code> then bar will not be drawn Example <pre><code>local m_vecVelocity = engine.get_netvar_offset(\"DT_BasePlayer\", \"m_vecVelocity[0]\")\nlocal function vec3_len(x, y, z)\nreturn math.sqrt(x * x + y * y + z * z)\nend\nesp.local_player.add_bar(\"Velocity\", function(entity)\nlocal x = ffi.cast(\"float*\", entity[m_vecVelocity])[0]\nlocal y = ffi.cast(\"float*\", entity[m_vecVelocity])[1]\nlocal z = ffi.cast(\"float*\", entity[m_vecVelocity])[2]\nreturn vec3_len(x, y, z) / 250 * 100\nend)\n</code></pre>"},{"location":"esp/#add_text","title":"add_text","text":"<p><code>esp.enemy.add_text(text_name: string, preview_value: string, callback: function)</code> </p> Name Type Description text_name <code>string</code> Name of the indicator preview_value <code>string</code> Preview value of the indicator callback <code>function</code> Function that receives <code>entity_t</code> in the argument, and should return a <code>string</code> value. If returns <code>nil</code> then indicator will not be drawn Example <pre><code>local m_bIsScoped = engine.get_netvar_offset(\"DT_CSPlayer\", \"m_bIsScoped\")\nesp.enemy.add_text(\"Scoped\", \"Scoped\", function(entity)\nif not entity:is_dormant() and ffi.cast(\"bool*\", entity[m_bIsScoped])[0] then\nreturn \"Scoped\"\nend\nend)\n</code></pre>"},{"location":"events/","title":"events","text":""},{"location":"events/#create_move","title":"create_move","text":"<p><code>create_move(cmd: user_cmd_t)</code> </p> Name Type Description cmd <code>user_cmd_t</code> User command"},{"location":"events/#paint","title":"paint","text":"<p><code>paint()</code> </p>"},{"location":"events/#override_view","title":"override_view","text":"<p><code>override_view(view_setup: view_setup_t)</code> </p> Name Type Description view_setup <code>view_setup_t</code> View setup"},{"location":"events/#game_event","title":"game_event","text":"<p><code>game_event(event: game_event_t)</code> </p> Name Type Description event <code>game_event_t</code> Game event <p>Note</p> <p>List of all game events can be found here</p>"},{"location":"events/#unload","title":"unload","text":"<p><code>unload()</code> </p>"},{"location":"globals/","title":"globals","text":"Name Type Description cur_time <code>number</code> Current server time in seconds real_time <code>number</code> Current local time in seconds frame_time <code>number</code> Time that was used to render a last game frame in seconds frame_count <code>number</code> Total rendered frames count absolute_frame_time <code>number</code> Time that was used to render a last game frame in seconds tick_count <code>number</code> Count of ticks that server has handled interval_per_tick <code>number</code> Duration of a tick in seconds max_clients <code>number</code> Maximum number of players allowed on the server choked_commands <code>number</code> Count of choked commands command_ack <code>number</code> Last command that server has been acknowledged of last_outgoing_command <code>number</code> Number of last command sequence number acknowledged by server delta_tick <code>number</code> Last valid received server tick is_connected <code>boolean</code> Is client connected to server or loading in game is_in_game <code>boolean</code> Is client loaded to server and in game camera_in_third_person <code>boolean</code> Is camera in third person"},{"location":"render/","title":"render","text":""},{"location":"render/#functions","title":"Functions","text":""},{"location":"render/#screen_size","title":"screen_size","text":"<p><code>render.screen_size():</code> <code>vec2_t</code> </p>"},{"location":"render/#setup_font","title":"setup_font","text":"<p><code>render.setup_font(filename: string, size: number, flags?: number):</code> <code>font_t</code> </p> Name Type Description filename <code>string</code> Path to the font size <code>number</code> Font size flags <code>number</code> Optional. Font flags <p>Warning</p> <p>If you specify a font that does not exist, return value will be <code>nil</code>.</p> Example <pre><code>local font = render.setup_font(\"C:/Windows/Fonts/verdana.ttf\", 32, 0)\nregister_callback(\"paint\", function()\nrender.text(\"hello from nixware lua api!\", font, vec2_t.new(100, 100), color_t.new(1, 1, 1, 1))\nend)\n</code></pre>"},{"location":"render/#calc_text_size","title":"calc_text_size","text":"<p><code>render.calc_text_size(text: string, font: font_t, size?: number):</code> <code>vec2_t</code> </p> Name Type Description text <code>string</code> Text size of which will be calculated font <code>font_t</code> Font object size <code>number</code> Optional. Font size <p>Warning</p> <p>If you specify a font that does not exist, return value will be <code>nil</code>.</p>"},{"location":"render/#world_to_screen","title":"world_to_screen","text":"<p><code>render.world_to_screen(pos: vec3_t):</code> <code>vec3_t</code> </p> Name Type Description pos <code>vec3_t</code> World position <p>Warning</p> <p>If world position is not on the screen, return value will be <code>nil</code>.</p> Example <pre><code>register_callback(\"paint\", function()\nlocal w2s = render.world_to_screen(vec3_t.new(0, 0, 0))\nif w2s then\nrender.circle_fade(w2s, 20, color_t.new(1, 0.25, 0.25, 0.5), color_t.new(0, 0, 0, 1))\nend\nend)\n</code></pre>"},{"location":"render/#draw-functions","title":"Draw functions","text":""},{"location":"render/#text","title":"text","text":"<p><code>render.text(text: string, font: font_t, pos: vec2_t, color?: color_t, size?: number)</code> </p> Name Type Description text <code>string</code> Text to render font <code>font_t</code> Font object, or <code>0</code> = default font, or <code>1</code> = pixel font pos <code>vec2_t</code> Position of where text will be rendered color <code>color_t</code> Optional. Text color size <code>number</code> Optional. Text size"},{"location":"render/#line","title":"line","text":"<p><code>render.line(from: vec2_t, to: vec2_t, color: color_t, thickness?: number)</code> </p> Name Type Description from <code>vec2_t</code> Start position of the line to <code>vec2_t</code> End position of the line color <code>color_t</code> Color of the line thickness <code>number</code> Optional. Thickness of the line"},{"location":"render/#rect","title":"rect","text":"<p><code>render.rect(from: vec2_t, to: vec2_t, color: color_t, rounding?: number, thickness?: number)</code> </p> Name Type Description from <code>vec2_t</code> Start position of the rectangle to <code>vec2_t</code> End position of the rectangle color <code>color_t</code> Color of the rectangle rounding <code>number</code> Optional. Rounding of the rectangle thickness <code>number</code> Optional. Thickness of the rectangle"},{"location":"render/#rect_filled","title":"rect_filled","text":"<p><code>render.rect_filled(from: vec2_t, to: vec2_t, color: color_t, rounding?: number)</code> </p> Name Type Description from <code>vec2_t</code> Start position of a rectangle to <code>vec2_t</code> End position of the rectangle color <code>color_t</code> Color of the rectangle rounding <code>number</code> Optional. Rounding of the rectangle"},{"location":"render/#rect_filled_fade","title":"rect_filled_fade","text":"<p><code>render.rect_filled_fade(from: vec2_t, to: vec2_t, col_upr_left: color_t, col_upr_right: color_t, col_bot_right: color_t, col_bot_left: color_t)</code> </p> Name Type Description from <code>vec2_t</code> Start position of a rectangle to <code>vec2_t</code> Font object col_upr_left <code>color_t</code> Color of the top left corner col_upr_right <code>color_t</code> Color of the top right corner col_bot_right <code>color_t</code> Color of the bottom right corner col_bot_left <code>color_t</code> Color of the bottom left corner"},{"location":"render/#circle","title":"circle","text":"<p><code>render.circle(pos: vec2_t, radius: number, segments: number, color: color_t, thickness?: number)</code> </p> Name Type Description pos <code>vec2_t</code> Position of the circle radius <code>number</code> Radius of the circle segments <code>number</code> Count of the circle segments color <code>color_t</code> Color of the circle thickness <code>number</code> Optional. Thickness of the circle"},{"location":"render/#circle_filled","title":"circle_filled","text":"<p><code>render.circle_filled(pos: vec2_t, radius: number, segments: number, color: color_t)</code> </p> Name Type Description pos <code>vec2_t</code> Position of the circle radius <code>number</code> Radius of the circle segments <code>number</code> Count of the circle segments color <code>color_t</code> Color of the circle"},{"location":"render/#circle_fade","title":"circle_fade","text":"<p><code>render.circle_fade(pos: vec2_t, radius: number, color_in: color_t, color_out: color_t)</code> </p> Name Type Description pos <code>vec2_t</code> Position of the circle radius <code>number</code> Radius of the circle color_in <code>color_t</code> Color of the center of the circle color_out <code>color_t</code> Color of the edge of the circle"},{"location":"render/#filled_polygon","title":"filled_polygon","text":"<p><code>render.filled_polygon(points: vec2_t[], color: color_t)</code> </p> Name Type Description points <code>vec2_t[]</code> Array of screen positions color <code>color_t</code> Color of the polygon"},{"location":"render/#poly_line","title":"poly_line","text":"<p><code>render.poly_line(points: vec2_t[], color: color_t)</code> </p> Name Type Description points <code>vec2_t[]</code> Array of screen positions color <code>color_t</code> Color of the polyline"},{"location":"render/#push_clip_rect","title":"push_clip_rect","text":"<p><code>render.push_clip_rect(from: vec2_t, to: vec2_t, intersect_with_current_clip_rect?: boolean)</code> </p> Name Type Description from <code>vec2_t</code> Start position of the clip rect to <code>vec2_t</code> End position of the clip rect intersect_with_current_clip_rect <code>boolean</code> Optional. Allow intersections with other clips"},{"location":"render/#pop_clip_rect","title":"pop_clip_rect","text":"<p><code>render.pop_clip_rect()</code> </p>"},{"location":"render/#world-draw-functions","title":"World draw functions","text":""},{"location":"render/#circle_3d","title":"circle_3d","text":"<p><code>render.circle_3d(pos: vec3_t, radius: number, color: color_t, thickness?: number, normal?: vec3_t)</code> </p> Name Type Description pos <code>vec3_t</code> Position of the circle radius <code>number</code> Radius of the circle color <code>color_t</code> Color of the circle thickness <code>number</code> Optional. Thickness of the circle normal <code>vec3_t</code> Optional. Rotation of the circle"},{"location":"render/#circle_filled_3d","title":"circle_filled_3d","text":"<p><code>render.circle_filled_3d(pos: vec3_t, radius: number, color: color_t, normal?: vec3_t)</code> </p> Name Type Description pos <code>vec3_t</code> Position of the circle radius <code>number</code> Radius of the circle color <code>color_t</code> Color of the circle normal <code>vec3_t</code> Optional. Rotation of the circle"},{"location":"render/#circle_fade_3d","title":"circle_fade_3d","text":"<p><code>render.circle_fade_3d(pos: vec3_t, radius: number, color_in: color_t, color_out: color_t, normal?: vec3_t)</code> </p> Name Type Description pos <code>vec3_t</code> Position of the circle radius <code>number</code> Radius of the circle color_in <code>color_t</code> Color of the center of the circle color_out <code>color_t</code> Color of the edge of the circle normal <code>vec3_t</code> Optional. Rotation of the circle"},{"location":"menu/","title":"menu","text":""},{"location":"menu/#functions-to-add-elements","title":"Functions to add elements","text":"<p>Info</p> <p>You can add elements in every location you want For example: <code>Ragebot/Globals</code> or <code>Visuals/Other</code></p>"},{"location":"menu/#add_check_box","title":"add_check_box","text":"<p><code>menu.add_check_box(label: string, location: string, default_value?: boolean, context_location?: string):</code> <code>check_box_t</code> </p> Name Type Description label <code>string</code> Label of the check box location <code>string</code> Location of the check box default_value <code>boolean</code> Optional. Default value of the check box context_location <code>string</code> Optional. Location of the context menu Example <pre><code>local my_checkbox = menu.add_check_box(\"My Checkbox!\", \"Misc/Misc\")\n</code></pre> What is \"context\"? <p>With context you can add a context menu to your element, which will be shown if you right click on it. <pre><code>local my_checkbox = menu.add_check_box(\"My Checkbox!\", \"Misc/Misc\", false, \"Misc/Misc/Test\")\n--\"Misc/Misc/Test\" is the context location\n--all elements with this context location will be shown in the context menu\nlocal context_checkbox = menu.add_check_box(\"Context Checkbox\", \"Misc/Misc/Test\", true)\nlocal context_slider = menu.add_slider_int(\"Context Slider\", \"Misc/Misc/Test\", 0, 100, 50)\n</code></pre> If you right click on \"My Checkbox!\", it will show you the context menu with \"Context Checkbox\" and \"Context Slider\".</p>"},{"location":"menu/#add_slider_int","title":"add_slider_int","text":"<p><code>menu.add_slider_int(label: string, location: string, min: number, max: number, default_value?: number):</code> <code>slider_int_t</code> </p> Name Type Description label <code>string</code> Label of the slider location <code>string</code> Location of the slider min <code>number</code> Minimum value of the slider max <code>number</code> Maximum value of the slider default_value <code>number</code> Optional. Default value of the slider Example <pre><code>local my_slider = menu.add_slider_int(\"My Slider :)\", \"Misc/Misc\", 0, 255)\n</code></pre>"},{"location":"menu/#add_slider_float","title":"add_slider_float","text":"<p><code>menu.add_slider_float(label: string, location: string, min: number, max: number, default_value?: number):</code> <code>slider_float_t</code> </p> Name Type Description label <code>string</code> Label of the slider location <code>string</code> Location of the slider min <code>number</code> Minimum value of the slider max <code>number</code> Maximum value of the slider default_value <code>number</code> Optional. Default value of the slider Example <pre><code>local my_slider = menu.add_slider_float(\"My Slider :)\", \"Misc/Misc\", 0, 255)\n</code></pre>"},{"location":"menu/#add_combo_box","title":"add_combo_box","text":"<p><code>menu.add_combo_box(label: string, location: string, items: string[], default_value?: number):</code> <code>combo_box_t</code> </p> Name Type Description label <code>string</code> Label of the combo box location <code>string</code> Location of the combo box items <code>string[]</code> Array of items for the combo box default_value <code>number</code> Optional. Default value of the combo box Example <pre><code>local combobox =\nmenu.add_combo_box(\"Extra\", \"Ragebot/Globals\", {\"DDoS on peek\", \"Crash all enemies\"}, 0)\n</code></pre>"},{"location":"menu/#add_multi_combo_box","title":"add_multi_combo_box","text":"<p><code>menu.add_multi_combo_box(label: string, location: string, items: string[], default_value?: number[]):</code> <code>multi_combo_box_t</code> </p> Name Type Description label <code>string</code> Label of the multi combo box location <code>string</code> Location of the multi combo box items <code>string[]</code> Array of items for the multi combo box default_value <code>number[]</code> Optional. List of active by default indeces Example <pre><code>local combobox =\nmenu.add_combo_box(\"Extra\", \"Ragebot/Globals\", {\"DDoS on peek\", \"Crash all enemies\", \"Crash myself\"}, {0, 1})\n</code></pre>"},{"location":"menu/#add_key_bind","title":"add_key_bind","text":"<p><code>menu.add_key_bind(label: string, location: string, show_label?: boolean, key?: number, type?: number, display_in_list?: boolean):</code> <code>key_bind_t</code> </p> Name Type Description label <code>string</code> Label of the key bind location <code>string</code> Location of the key bind show_label <code>boolean</code> Optional. Whether to show the label key <code>number</code> Optional. The key for the key bind type <code>number</code> Optional. The type for the key bind display_in_list <code>boolean</code> Optional. Whether to display the key bind in the key bind list Example <p>This code will create a key bind attached to check box <pre><code>local box = menu.add_check_box(\"best cheat\", \"Ragebot/Globals\")\nlocal bind = menu.add_key_bind(\"best cheat\", \"Ragebot/Globals\", false)\n</code></pre> This is how to create a standalone key bind <pre><code>local bind = menu.add_key_bind(\"best cheat\", \"Ragebot/Globals\")\n</code></pre></p>"},{"location":"menu/#add_color_picker","title":"add_color_picker","text":"<p><code>menu.add_color_picker(label: string, location: string, show_label?: boolean, show_alpha?: boolean, default_value?: color_t):</code> <code>color_picker_t</code> </p> Name Type Description label <code>string</code> Label of the color picker location <code>string</code> Location of the color picker show_label <code>boolean</code> Optional. Whether to show the label show_alpha <code>boolean</code> Optional. Whether to show the alpha channel default_value <code>color_t</code> Optional. Default color for the color picker Example <p>This code will create a color picker attached to check box <pre><code>local box = menu.add_check_box(\"test\", \"Ragebot/Globals\")\nlocal color_picker = menu.add_color_picker(\"test\", \"Ragebot/Globals\", false)\n</code></pre> This code will create a standalone color picker <pre><code>local color_picker = menu.add_color_picker(\"test\", \"Ragebot/Globals\")\n</code></pre></p>"},{"location":"menu/#add_button","title":"add_button","text":"<p><code>menu.add_button(label: string, location: string, callback: function):</code> <code>button_t</code> </p> Name Type Description label <code>string</code> Label of the button location <code>string</code> Location of the button callback <code>function</code> Callback which will be executed when the button is pressed Example <pre><code>local my_button = menu.add_button(\"My button\", \"Misc/Misc\", function()\nprint(\"My button exec!\")\nend)\n</code></pre>"},{"location":"menu/#functions-to-find-elements","title":"Functions to find elements","text":""},{"location":"menu/#find_check_box","title":"find_check_box","text":"<p><code>menu.find_check_box(label: string, location: string):</code> <code>check_box_t</code> </p> Name Type Description label <code>string</code> Label of the check box location <code>string</code> Location of the check box Example <pre><code>local ragebot_enabled = menu.find_check_box(\"Enabled\", \"Ragebot/Globals\")\n</code></pre>"},{"location":"menu/#find_slider_int","title":"find_slider_int","text":"<p><code>menu.find_slider_int(label: string, location: string):</code> <code>slider_int_t</code> </p> Name Type Description label <code>string</code> Label of the slider location <code>string</code> Location of the slider Example <pre><code>local ragebot_fov = menu.find_slider_int(\"FOV\", \"Ragebot/Globals\")\n</code></pre>"},{"location":"menu/#find_slider_float","title":"find_slider_float","text":"<p><code>menu.find_slider_float(label: string, location: string):</code> <code>slider_float_t</code> </p> Name Type Description label <code>string</code> Label of the slider location <code>string</code> Location of the slider Example <pre><code>local viewmodel_fov = menu.find_slider_float(\"FOV\", \"Visuals/Viewmodel\")\n</code></pre>"},{"location":"menu/#find_combo_box","title":"find_combo_box","text":"<p><code>menu.find_combo_box(label: string, location: string):</code> <code>combo_box_t</code> </p> Name Type Description label <code>string</code> Label of the combo box location <code>string</code> Location of the combo box"},{"location":"menu/#find_multi_combo_box","title":"find_multi_combo_box","text":"<p><code>menu.find_multi_combo_box(label: string, location: string):</code> <code>multi_combo_box_t</code> </p> Name Type Description label <code>string</code> Label of the multi combo box location <code>string</code> Location of the multi combo box"},{"location":"menu/#find_key_bind","title":"find_key_bind","text":"<p><code>menu.find_key_bind(label: string, location: string):</code> <code>key_bind_t</code> </p> Name Type Description label <code>string</code> Label of the key bind location <code>string</code> Location of the key bind"},{"location":"menu/#find_color_picker","title":"find_color_picker","text":"<p><code>menu.find_color_picker(label: string, location: string):</code> <code>color_picker_t</code> </p> Name Type Description label <code>string</code> Label of the color picker location <code>string</code> Location of the color picker"},{"location":"menu/#other-functions","title":"Other functions","text":""},{"location":"menu/#get_menu_rect","title":"get_menu_rect","text":"<p><code>menu.get_menu_rect():</code> <code>vec4_t</code> </p> Example <pre><code>register_callback(\"paint\", function()\nif menu.is_visible() then\nlocal menu_rect = menu.get_menu_rect()\nrender.rect_filled_fade(\nvec2_t.new(menu_rect.x - 5, menu_rect.y - 5),\nvec2_t.new(menu_rect.z + 5, menu_rect.w + 5),\ncolor_t.new(1, 0, 0, 0.3),\ncolor_t.new(0, 0, 1, 0),\ncolor_t.new(0, 0, 1, 0.3),\ncolor_t.new(1, 0, 0, 0)\n)\nend\nend)\n</code></pre>"},{"location":"menu/#is_visible","title":"is_visible","text":"<p><code>menu.is_visible():</code> <code>boolean</code> </p>"},{"location":"menu/#dump","title":"dump","text":"<p><code>menu.dump()</code> </p> <p>Prints all elements to console</p>"},{"location":"menu/types/button_t/","title":"button_t","text":""},{"location":"menu/types/button_t/#main-functions","title":"Main functions","text":""},{"location":"menu/types/button_t/#execute","title":"execute","text":"<p><code>button:execute()</code> </p> <p>Executes the set callback</p>"},{"location":"menu/types/button_t/#getters","title":"Getters","text":""},{"location":"menu/types/button_t/#is_visible","title":"is_visible","text":"<p><code>button:is_visible():</code> <code>boolean</code> </p>"},{"location":"menu/types/button_t/#get_label","title":"get_label","text":"<p><code>button:get_label():</code> <code>string</code> </p>"},{"location":"menu/types/button_t/#setters","title":"Setters","text":""},{"location":"menu/types/button_t/#set_visible","title":"set_visible","text":"<p><code>button:set_visible(visibility: boolean)</code> </p> Name Type Description visibility <code>boolean</code> Will the element be visible"},{"location":"menu/types/button_t/#set_label","title":"set_label","text":"<p><code>button:set_label(label: string)</code> </p> Name Type Description label <code>string</code> The new label"},{"location":"menu/types/check_box_t/","title":"check_box_t","text":""},{"location":"menu/types/check_box_t/#getters","title":"Getters","text":""},{"location":"menu/types/check_box_t/#get","title":"get","text":"<p><code>checkbox:get():</code> <code>boolean</code> </p>"},{"location":"menu/types/check_box_t/#is_visible","title":"is_visible","text":"<p><code>checkbox:is_visible():</code> <code>boolean</code> </p>"},{"location":"menu/types/check_box_t/#get_label","title":"get_label","text":"<p><code>checkbox:get_label():</code> <code>string</code> </p>"},{"location":"menu/types/check_box_t/#setters","title":"Setters","text":""},{"location":"menu/types/check_box_t/#set","title":"set","text":"<p><code>checkbox:set(value: boolean)</code> </p> Name Type Description value <code>boolean</code> Value to set the check box to"},{"location":"menu/types/check_box_t/#set_visible","title":"set_visible","text":"<p><code>checkbox:set_visible(visibility: boolean)</code> </p> Name Type Description visibility <code>boolean</code> Will the element be visible"},{"location":"menu/types/check_box_t/#set_label","title":"set_label","text":"<p><code>checkbox:set_label(label: string)</code> </p> Name Type Description label <code>string</code> The new label"},{"location":"menu/types/color_picker_t/","title":"color_picker_t","text":""},{"location":"menu/types/color_picker_t/#getters","title":"Getters","text":""},{"location":"menu/types/color_picker_t/#get","title":"get","text":"<p><code>colorpicker:get():</code> <code>color_t</code> </p>"},{"location":"menu/types/color_picker_t/#is_visible","title":"is_visible","text":"<p><code>colorpicker:is_visible():</code> <code>boolean</code> </p>"},{"location":"menu/types/color_picker_t/#get_label","title":"get_label","text":"<p><code>colorpicker:get_label():</code> <code>string</code> </p>"},{"location":"menu/types/color_picker_t/#setters","title":"Setters","text":""},{"location":"menu/types/color_picker_t/#set","title":"set","text":"<p><code>colorpicker:set(value: color_t)</code> </p> Name Type Description value <code>color_t</code> New color the color picker will be set to"},{"location":"menu/types/color_picker_t/#set_visible","title":"set_visible","text":"<p><code>colorpicker:set_visible(visibility: boolean)</code> </p> Name Type Description visibility <code>boolean</code> Will the element be visible"},{"location":"menu/types/color_picker_t/#set_label","title":"set_label","text":"<p><code>colorpicker:set_label(label: string)</code> </p> Name Type Description label <code>string</code> The new label"},{"location":"menu/types/combo_box_t/","title":"combo_box_t","text":""},{"location":"menu/types/combo_box_t/#getters","title":"Getters","text":""},{"location":"menu/types/combo_box_t/#get","title":"get","text":"<p><code>combobox:get():</code> <code>number</code> </p>"},{"location":"menu/types/combo_box_t/#is_visible","title":"is_visible","text":"<p><code>combobox:is_visible():</code> <code>boolean</code> </p>"},{"location":"menu/types/combo_box_t/#get_label","title":"get_label","text":"<p><code>combobox:get_label():</code> <code>string</code> </p>"},{"location":"menu/types/combo_box_t/#setters","title":"Setters","text":""},{"location":"menu/types/combo_box_t/#set","title":"set","text":"<p><code>combobox:set(value: number)</code> </p> Name Type Description value <code>number</code> New combo box value (corresponds to the index of the item)"},{"location":"menu/types/combo_box_t/#set_items","title":"set_items","text":"<p><code>combobox:set_items(items: string[])</code> </p> Name Type Description items <code>string[]</code> New combo box items"},{"location":"menu/types/combo_box_t/#set_visible","title":"set_visible","text":"<p><code>combobox:set_visible(visibility: boolean)</code> </p> Name Type Description visibility <code>boolean</code> Will the element be visible"},{"location":"menu/types/combo_box_t/#set_label","title":"set_label","text":"<p><code>combobox:set_label(label: string)</code> </p> Name Type Description label <code>string</code> The new label"},{"location":"menu/types/key_bind_t/","title":"key_bind_t","text":""},{"location":"menu/types/key_bind_t/#getters","title":"Getters","text":""},{"location":"menu/types/key_bind_t/#is_active","title":"is_active","text":"<p><code>keybind:is_active():</code> <code>boolean</code> </p>"},{"location":"menu/types/key_bind_t/#get_key","title":"get_key","text":"<p><code>keybind:get_key():</code> <code>number</code> </p>"},{"location":"menu/types/key_bind_t/#get_type","title":"get_type","text":"<p><code>keybind:get_type():</code> <code>number</code> </p>"},{"location":"menu/types/key_bind_t/#get_display_in_list","title":"get_display_in_list","text":"<p><code>keybind:get_display_in_list():</code> <code>boolean</code> </p>"},{"location":"menu/types/key_bind_t/#is_visible","title":"is_visible","text":"<p><code>keybind:is_visible():</code> <code>boolean</code> </p>"},{"location":"menu/types/key_bind_t/#get_label","title":"get_label","text":"<p><code>keybind:get_label():</code> <code>string</code> </p>"},{"location":"menu/types/key_bind_t/#setters","title":"Setters","text":""},{"location":"menu/types/key_bind_t/#set_type","title":"set_type","text":"<p><code>keybind:set_type(type: number)</code> </p> Name Type Description type <code>number</code> Type to set the key bind to"},{"location":"menu/types/key_bind_t/#set_key","title":"set_key","text":"<p><code>keybind:set_key(key: number)</code> </p> Name Type Description key <code>number</code> Key which will be used to activate the key bind"},{"location":"menu/types/key_bind_t/#set_display_in_list","title":"set_display_in_list","text":"<p><code>keybind:set_display_in_list(display_in_list: boolean)</code> </p> Name Type Description display_in_list <code>boolean</code> Display or hide the keybind in the active binds list"},{"location":"menu/types/key_bind_t/#set_visible","title":"set_visible","text":"<p><code>keybind:set_visible(visibility: boolean)</code> </p> Name Type Description visibility <code>boolean</code> Will the element be visible"},{"location":"menu/types/key_bind_t/#set_label","title":"set_label","text":"<p><code>keybind:set_label(label: string)</code> </p> Name Type Description label <code>string</code> The new label"},{"location":"menu/types/multi_combo_box_t/","title":"multi_combo_box_t","text":""},{"location":"menu/types/multi_combo_box_t/#getters","title":"Getters","text":""},{"location":"menu/types/multi_combo_box_t/#get","title":"get","text":"<p><code>multicombobox:get(index: number):</code> <code>boolean</code> </p> Name Type Description index <code>number</code> Index of the item to get"},{"location":"menu/types/multi_combo_box_t/#is_visible","title":"is_visible","text":"<p><code>multicombobox:is_visible():</code> <code>boolean</code> </p>"},{"location":"menu/types/multi_combo_box_t/#get_label","title":"get_label","text":"<p><code>multicombobox:get_label():</code> <code>string</code> </p>"},{"location":"menu/types/multi_combo_box_t/#setters","title":"Setters","text":""},{"location":"menu/types/multi_combo_box_t/#set","title":"set","text":"<p><code>multicombobox:set(index: number, enabled: boolean)</code> </p> Name Type Description index <code>number</code> Index of the item to set enabled <code>boolean</code> Is the item enabled"},{"location":"menu/types/multi_combo_box_t/#set_items","title":"set_items","text":"<p><code>multicombobox:set_items(items: string[])</code> </p> Name Type Description items <code>string[]</code> New multi combo box items"},{"location":"menu/types/multi_combo_box_t/#set_visible","title":"set_visible","text":"<p><code>multicombobox:set_visible(visibility: boolean)</code> </p> Name Type Description visibility <code>boolean</code> Will the element be visible"},{"location":"menu/types/multi_combo_box_t/#set_label","title":"set_label","text":"<p><code>multicombobox:set_label(label: string)</code> </p> Name Type Description label <code>string</code> The new label"},{"location":"menu/types/slider_float_t/","title":"slider_float_t","text":""},{"location":"menu/types/slider_float_t/#getters","title":"Getters","text":""},{"location":"menu/types/slider_float_t/#get","title":"get","text":"<p><code>slider:get():</code> <code>number</code> </p>"},{"location":"menu/types/slider_float_t/#is_visible","title":"is_visible","text":"<p><code>slider:is_visible():</code> <code>boolean</code> </p>"},{"location":"menu/types/slider_float_t/#get_label","title":"get_label","text":"<p><code>slider:get_label():</code> <code>string</code> </p>"},{"location":"menu/types/slider_float_t/#setters","title":"Setters","text":""},{"location":"menu/types/slider_float_t/#set","title":"set","text":"<p><code>slider:set(value: number)</code> </p> Name Type Description value <code>number</code> New slider value"},{"location":"menu/types/slider_float_t/#set_visible","title":"set_visible","text":"<p><code>slider:set_visible(visibility: boolean)</code> </p> Name Type Description visibility <code>boolean</code> Will the element be visible"},{"location":"menu/types/slider_float_t/#set_label","title":"set_label","text":"<p><code>slider:set_label(label: string)</code> </p> Name Type Description label <code>string</code> The new label"},{"location":"menu/types/slider_int_t/","title":"slider_int_t","text":""},{"location":"menu/types/slider_int_t/#getters","title":"Getters","text":""},{"location":"menu/types/slider_int_t/#get","title":"get","text":"<p><code>slider:get():</code> <code>number</code> </p>"},{"location":"menu/types/slider_int_t/#is_visible","title":"is_visible","text":"<p><code>slider:is_visible():</code> <code>boolean</code> </p>"},{"location":"menu/types/slider_int_t/#get_label","title":"get_label","text":"<p><code>slider:get_label():</code> <code>string</code> </p>"},{"location":"menu/types/slider_int_t/#setters","title":"Setters","text":""},{"location":"menu/types/slider_int_t/#set","title":"set","text":"<p><code>slider:set(value: number)</code> </p> Name Type Description value <code>number</code> New slider value"},{"location":"menu/types/slider_int_t/#set_visible","title":"set_visible","text":"<p><code>slider:set_visible(visibility: boolean)</code> </p> Name Type Description visibility <code>boolean</code> Will the element be visible"},{"location":"menu/types/slider_int_t/#set_label","title":"set_label","text":"<p><code>slider:set_label(label: string)</code> </p> Name Type Description label <code>string</code> The new label"},{"location":"types/angle_t/","title":"angle_t","text":"Name Type pitch <code>number</code> yaw <code>number</code> roll <code>number</code>"},{"location":"types/color_t/","title":"color_t","text":"Name Type r <code>number</code> g <code>number</code> b <code>number</code> a <code>number</code>"},{"location":"types/convar_t/","title":"convar_t","text":""},{"location":"types/convar_t/#getters","title":"Getters","text":""},{"location":"types/convar_t/#get_name","title":"get_name","text":"<p><code>convar:get_name():</code> <code>string</code> </p>"},{"location":"types/convar_t/#get_bool","title":"get_bool","text":"<p><code>convar:get_bool():</code> <code>boolean</code> </p>"},{"location":"types/convar_t/#get_int","title":"get_int","text":"<p><code>convar:get_int():</code> <code>number</code> </p>"},{"location":"types/convar_t/#get_float","title":"get_float","text":"<p><code>convar:get_float():</code> <code>number</code> </p>"},{"location":"types/convar_t/#get_string","title":"get_string","text":"<p><code>convar:get_string():</code> <code>string</code> </p>"},{"location":"types/convar_t/#setters","title":"Setters","text":""},{"location":"types/convar_t/#set_bool","title":"set_bool","text":"<p><code>convar:set_bool(value: boolean)</code> </p> Name Type Description value <code>boolean</code> New boolean value"},{"location":"types/convar_t/#set_int","title":"set_int","text":"<p><code>convar:set_int(value: number)</code> </p> Name Type Description value <code>number</code> New int value"},{"location":"types/convar_t/#set_float","title":"set_float","text":"<p><code>convar:set_float(value: number)</code> </p> Name Type Description value <code>number</code> New float value"},{"location":"types/convar_t/#set_string","title":"set_string","text":"<p><code>convar:set_string(value: string)</code> </p> Name Type Description value <code>string</code> New string value"},{"location":"types/entity_t/","title":"entity_t","text":""},{"location":"types/entity_t/#entity-functions","title":"Entity functions","text":""},{"location":"types/entity_t/#is_player","title":"is_player","text":"<p><code>entity:is_player():</code> <code>boolean</code> </p>"},{"location":"types/entity_t/#is_weapon","title":"is_weapon","text":"<p><code>entity:is_weapon():</code> <code>boolean</code> </p>"},{"location":"types/entity_t/#is_dormant","title":"is_dormant","text":"<p><code>entity:is_dormant():</code> <code>boolean</code> </p>"},{"location":"types/entity_t/#get_index","title":"get_index","text":"<p><code>entity:get_index():</code> <code>number</code> </p>"},{"location":"types/entity_t/#get_origin","title":"get_origin","text":"<p><code>entity:get_origin():</code> <code>vec3_t</code> </p> <p>Returns abs origin of the entity</p>"},{"location":"types/entity_t/#get_class_id","title":"get_class_id","text":"<p><code>entity:get_class_id():</code> <code>number</code> </p>"},{"location":"types/entity_t/#get_class_name","title":"get_class_name","text":"<p><code>entity:get_class_name():</code> <code>string</code> </p>"},{"location":"types/entity_t/#getting-ffi-pointer","title":"Getting FFI pointer","text":"<p>To get entity pointer you can use <code>entity[0]</code> Also you can use <code>entity[OFFSET]</code> to get the address pointing to specified offset of the entity Hexadecimal and decimal number are both supported</p> <p>Example</p> <p>This example will print money of all players <pre><code>entitylist.get_entities(\"CCSPlayer\", false, function(entity)\nlocal origin = entity:get_origin()\nlocal origin2 = render.world_to_screen(origin)\nlocal money = ffi.cast(\"int*\", entity[0x117B8])[0] --m_iAccount: 0x117B8\nif origin2 ~= nil then\nrender.text(tostring(money), 0, origin2)\nend\nend)\n</code></pre></p>"},{"location":"types/game_event_t/","title":"game_event_t","text":""},{"location":"types/game_event_t/#getters","title":"Getters","text":""},{"location":"types/game_event_t/#get_name","title":"get_name","text":"<p><code>event:get_name():</code> <code>string</code> </p>"},{"location":"types/game_event_t/#get_bool","title":"get_bool","text":"<p><code>event:get_bool(key_name: string, default_value?: boolean):</code> <code>boolean</code> </p> Name Type Description key_name <code>string</code> Key name default_value <code>boolean</code> Optional. Default value which will be returned if event value isn't available"},{"location":"types/game_event_t/#get_int","title":"get_int","text":"<p><code>event:get_int(key_name: string, default_value?: number):</code> <code>number</code> </p> Name Type Description key_name <code>string</code> Key name default_value <code>number</code> Optional. Default value which will be returned if event value isn't available"},{"location":"types/game_event_t/#get_uint64","title":"get_uint64","text":"<p><code>event:get_uint64(key_name: string, default_value?: number):</code> <code>number</code> </p> Name Type Description key_name <code>string</code> Key name default_value <code>number</code> Optional. Default value which will be returned if event value isn't available"},{"location":"types/game_event_t/#get_float","title":"get_float","text":"<p><code>event:get_float(key_name: string, default_value?: number):</code> <code>number</code> </p> Name Type Description key_name <code>string</code> Key name default_value <code>number</code> Optional. Default value which will be returned if event value isn't available"},{"location":"types/game_event_t/#get_string","title":"get_string","text":"<p><code>event:get_string(key_name: string, default_value?: string):</code> <code>string</code> </p> Name Type Description key_name <code>string</code> Key name default_value <code>string</code> Optional. Default value which will be returned if event value isn't available"},{"location":"types/game_event_t/#get_wstring","title":"get_wstring","text":"<p><code>event:get_wstring(key_name: string, default_value?: string):</code> <code>string</code> </p> Name Type Description key_name <code>string</code> Key name default_value <code>string</code> Optional. Default value which will be returned if event value isn't available"},{"location":"types/game_event_t/#setters","title":"Setters","text":""},{"location":"types/game_event_t/#set_bool","title":"set_bool","text":"<p><code>event:set_bool(key_name: string, value: boolean)</code> </p> Name Type Description key_name <code>string</code> Key name value <code>boolean</code> New boolean value"},{"location":"types/game_event_t/#set_int","title":"set_int","text":"<p><code>event:set_int(key_name: string, value: number)</code> </p> Name Type Description key_name <code>string</code> Key name value <code>number</code> New int value"},{"location":"types/game_event_t/#set_uint64","title":"set_uint64","text":"<p><code>event:set_uint64(key_name: string, value: number)</code> </p> Name Type Description key_name <code>string</code> Key name value <code>number</code> New uint64 value"},{"location":"types/game_event_t/#set_float","title":"set_float","text":"<p><code>event:set_float(key_name: string, value: number)</code> </p> Name Type Description key_name <code>string</code> Key name value <code>number</code> New float value"},{"location":"types/game_event_t/#set_string","title":"set_string","text":"<p><code>event:set_string(key_name: string, value: string)</code> </p> Name Type Description key_name <code>string</code> Key name value <code>string</code> New string value"},{"location":"types/game_event_t/#set_wstring","title":"set_wstring","text":"<p><code>event:set_wstring(key_name: string, value: string)</code> </p> Name Type Description key_name <code>string</code> Key name value <code>string</code> New wstring value"},{"location":"types/trace_t/","title":"trace_t","text":""},{"location":"types/trace_t/#trace_t","title":"trace_t","text":"Name Type Description start_pos <code>vec3_t</code> Start position end_pos <code>vec3_t</code> Final position plane <code>plane_t</code> Surface normal at impact. fraction <code>number</code> Percentage in the range [0.0, 1.0]. How far the trace went before hitting something. <code>1.0</code> - didn't hit anything contents <code>number</code> Contents on other side of surface hit disp_flags <code>number</code> Displacement flags for marking surfaces with data all_solid <code>boolean</code> Returns <code>true</code> if the plane is invalid start_solid <code>boolean</code> Returns <code>true</code> if the initial point was in a solid area surface <code>surface_t</code> Surface hit (impact surface). hitgroup <code>number</code> <code>0</code> - generic, non-zero is specific body part physics_bone <code>number</code> Physics bone that was hit by the trace world_surface_index <code>number</code> Index of the <code>msurface2_t</code>, if applicable entity <code>entity_t</code> Entity that was hit by the trace hitbox <code>number</code> Hitbox that was hit by the trace did_hit <code>function</code> Returns <code>true</code> if there was any kind of impact at all did_hit_world <code>function</code> Returns <code>true</code> if the entity points at the world entity did_hit_non_world <code>function</code> Returns <code>true</code> if the trace hit something and it wasn't the world is_visible <code>function</code> Returns <code>true</code> if the final position is visible"},{"location":"types/trace_t/#surface_t","title":"surface_t","text":"Name Type name <code>string</code> props <code>number</code> flags <code>number</code>"},{"location":"types/trace_t/#plane_t","title":"plane_t","text":"Name Type normal <code>vec3_t</code> dist <code>number</code> type <code>number</code> signbits <code>number</code>"},{"location":"types/user_cmd_t/","title":"user_cmd_t","text":"Name Type Description send_packet <code>boolean</code> Is packet will be sent to the server (fake lag) command_number <code>number</code> Current command number tick_count <code>number</code> Current tick count viewangles <code>angle_t</code> Crosshair angle forwardmove <code>number</code> Forward/backward speed sidemove <code>number</code> Left/right speed upmove <code>number</code> Up/down speed buttons <code>number</code> Buttons bit field random_seed <code>number</code> Random seed for shared random functions mousedx <code>number</code> Mouse X movement delta mousedy <code>number</code> Mouse Y movement delta"},{"location":"types/vec2_t/","title":"vec2_t","text":"Name Type x <code>number</code> y <code>number</code>"},{"location":"types/vec3_t/","title":"vec3_t","text":"Name Type x <code>number</code> y <code>number</code> z <code>number</code>"},{"location":"types/vec4_t/","title":"vec4_t","text":"Name Type x <code>number</code> y <code>number</code> z <code>number</code> w <code>number</code>"},{"location":"types/view_setup_t/","title":"view_setup_t","text":"Name Type fov <code>number</code> view <code>angle_t</code> camera <code>vec3_t</code>"}]}